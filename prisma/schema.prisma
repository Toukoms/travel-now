generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  firstName      String?
  telNumber      String
  cin            String        @unique
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  hashedPassword String?
  reservation    Reservation[]
  accounts       Account[]
  sessions       Session[]
  isAdmin        Boolean       @default(false)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Reservation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  nbPlace     Int
  totalPrice  Int
  expireAfter DateTime
  travelId    String   @db.ObjectId
  travel      Travel   @relation(fields: [travelId], references: [id])
}

model Travel {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  departure      String
  arrival        String
  departureDate  String
  departureTime  String
  cooperative    String
  price          Int
  maxPlace       Int
  availablePlace Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  expireAfter    DateTime
  Reservation    Reservation[]
}
